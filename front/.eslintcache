[{"C:\\works\\hello\\front\\src\\components\\Hello.tsx":"1","C:\\works\\hello\\front\\src\\index.tsx":"2","C:\\works\\Hello\\front\\src\\components\\Hello.tsx":"3","C:\\works\\Hello\\front\\src\\index.tsx":"4"},{"size":7678,"mtime":1611290175544,"results":"5","hashOfConfig":"6"},{"size":139,"mtime":1611125839909,"results":"7","hashOfConfig":"6"},{"size":6115,"mtime":1611238411696,"results":"8","hashOfConfig":"9"},{"size":146,"mtime":1611223350509,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"1q1vnyu",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6sq173",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\works\\hello\\front\\src\\components\\Hello.tsx",["20"],"import { useRef, useState, useEffect } from 'react'\r\nimport '../scss/Hello.scss'\r\nlet audio: any\r\n\r\nconst Hello = () => {\r\n\r\n  const DIV_ELEMENT = useRef<HTMLDivElement>(null)\r\n  const DIV_ELEMENT2 = useRef<HTMLDivElement>(null)\r\n  const DIV_ELEMENT3 = useRef<HTMLDivElement>(null)\r\n  const INPUT_ELEMENT = useRef<HTMLInputElement>(null)\r\n  const [visible, setVisible]: any = useState(false)\r\n  const [loading, setLoading]: any = useState(false)\r\n  const [addmusic, setAddmusic]: any = useState(false)\r\n  const [remove_music, setRemoveMusic]: any = useState(false)\r\n  const [playlist, setPlaylist]: any = useState([])\r\n  const [isStop, setisStop]: any = useState(true)\r\n  let REMOVE_LIST: any = ''\r\n\r\n  useEffect(() => { \r\n    const GetPlayList = async () => {\r\n      const response = await fetch(process.env.REACT_APP_URL + '/init')\r\n      let json = await response.json()\r\n      setPlaylist(json)\r\n      REMOVE_LIST = json\r\n    }\r\n    GetPlayList()\r\n  }, [])\r\n\r\n  const CloseSubTag = () => {\r\n    if(visible) setVisible(false)\r\n  }\r\n\r\n  const ShowSettings = () => {\r\n    visible ? setVisible(false) : setVisible(true)\r\n  }\r\n\r\n  const CheckURL = async () => {\r\n    if(INPUT_ELEMENT.current?.value !== '') {\r\n      setLoading(true)\r\n\r\n      type Data = {\r\n        url: string | undefined\r\n      }\r\n\r\n      let data: Data = {\r\n        url: INPUT_ELEMENT.current?.value\r\n      }\r\n      const response = await fetch(process.env.REACT_APP_URL + '/backend/extract', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n  \r\n      const result = await response.json()\r\n      \r\n      if(result.message === 'Success') {\r\n        DIV_ELEMENT2.current!.style.display = 'block'\r\n        DIV_ELEMENT2.current!.classList.add('success')\r\n        DIV_ELEMENT2.current!.innerHTML = '곡이 등록되었습니다'\r\n        setLoading(false)\r\n      } else {\r\n        DIV_ELEMENT2.current!.style.display = 'block'\r\n        DIV_ELEMENT2.current!.classList.add('fail')\r\n        DIV_ELEMENT2.current!.innerHTML = '유효하지 않은 URL 입니다'\r\n        setLoading(false)\r\n      }\r\n    } else {\r\n      setLoading(false)\r\n    }\r\n\r\n    if(INPUT_ELEMENT.current?.value.length === 0) {\r\n      DIV_ELEMENT2.current!.style.display = 'none'\r\n      DIV_ELEMENT2.current!.innerHTML = ''\r\n    }\r\n  }\r\n\r\n  const GetRandom = (min: number, max: number) => {\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n  }\r\n\r\n  const Play = () => {\r\n    DIV_ELEMENT3.current!.style.display = 'block'\r\n    const child: any = DIV_ELEMENT.current?.children\r\n    for(let i = 0; i < child.length; i++) { child[i].style.animation = 'animate 1s linear infinite' }\r\n    child[0].style.animationDelay = '0s'\r\n    child[1].style.animationDelay = '0.3s'\r\n    child[2].style.animationDelay = '0.6s'\r\n    child[3].style.animationDelay = '0.9s'\r\n    child[4].style.animationDelay = '0.2s'\r\n    child[5].style.animationDelay = '0.5s'\r\n    child[6].style.animationDelay = '0.8s'\r\n    if(!isStop) setisStop(true)\r\n\r\n    let random = GetRandom(0, playlist.length)\r\n    if(audio !== undefined) audio.pause()\r\n    // audio = new Audio('hello/AKMU - FREEDOM (AUDIO).mp3') <== FOR TEST\r\n    audio = new Audio('/hello/mp3/' + playlist[random])\r\n    audio.play()\r\n    playlist.splice(random, 1)\r\n    audio.addEventListener('ended', Play)\r\n  }\r\n  \r\n  const Stop = () => {\r\n    if(audio !== undefined) {\r\n      DIV_ELEMENT3.current!.style.display = 'none'\r\n      const child: any = DIV_ELEMENT.current?.children\r\n      for(let i = 0; i < child.length; i++) { child[i].style.animation = '' }\r\n      audio.pause()\r\n      setisStop(false)\r\n    } \r\n  }\r\n  const Restart = () => {\r\n    if(audio !== undefined) {\r\n      DIV_ELEMENT3.current!.style.display = 'block'\r\n      const child: any = DIV_ELEMENT.current?.children\r\n      for(let i = 0; i < child.length; i++) { child[i].style.animation = 'animate 1s linear infinite' }\r\n      child[0].style.animationDelay = '0s'\r\n      child[1].style.animationDelay = '0.3s'\r\n      child[2].style.animationDelay = '0.6s'\r\n      child[3].style.animationDelay = '0.9s'\r\n      child[4].style.animationDelay = '0.2s'\r\n      child[5].style.animationDelay = '0.5s'\r\n      child[6].style.animationDelay = '0.8s'\r\n      audio.play()\r\n      setisStop(true)\r\n    }\r\n  }\r\n\r\n  const CloseAddMusic = () => {\r\n    setAddmusic(false)\r\n    setLoading(false)\r\n  }\r\n\r\n  const RemoveMusic = async (e: any) => {\r\n\r\n    type DeleteDate = {\r\n      filename: string\r\n    }\r\n\r\n    let data: DeleteDate = {\r\n      filename: e.target.previousSibling.innerHTML\r\n    }\r\n\r\n    const response = await fetch(process.env.REACT_APP_URL + '/backend/delete', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    const result = await response.json()\r\n\r\n    if(result.message === 'Success') {\r\n      e.target.previousSibling.remove()\r\n      e.target.remove()\r\n    } else {\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id='hello' onClick={CloseSubTag}>\r\n      <header>\r\n        <div className='logo'>Hello!</div>\r\n        <div className='settings' onClick={ShowSettings}></div>\r\n        {visible?\r\n        <ul>\r\n          <li onClick={()=>setAddmusic(true)}>곡 등록</li>\r\n          <li onClick={()=>setRemoveMusic(true)}>곡 삭제</li>\r\n        </ul>\r\n        : null}\r\n      </header>\r\n      <section>\r\n        <div className='status-wrapper' ref={DIV_ELEMENT3}>\r\n          <div className='music-wave-loader' ref={DIV_ELEMENT}>\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n          </div>\r\n        </div>\r\n        <div className='control-wrapper'>\r\n          <button onClick={Play}>PLAY</button>\r\n          { isStop ?\r\n            <button onClick={Stop}>STOP</button>\r\n            :   \r\n            <button onClick={Restart}>RESTART</button>\r\n          }\r\n        </div>\r\n      </section>\r\n      <footer>\r\n\r\n      </footer>\r\n      { addmusic?\r\n      <div className='add-music-wrapper'>\r\n          <input type='text' placeholder='유튜브 링크를 입력하세요' spellCheck={false} ref={INPUT_ELEMENT} onKeyUp={CheckURL} />\r\n          { loading ? \r\n          <div className='loading-wrapper'>\r\n            <div className='loading'></div>\r\n          </div>\r\n          : null }\r\n          <div className='add-result' ref={DIV_ELEMENT2}></div>\r\n          <div className='close-add-music' onClick={CloseAddMusic}>닫기</div>\r\n      </div> \r\n      : null }\r\n      {\r\n      remove_music?\r\n      <div className='remove-modal'>\r\n            <div className='modal-overlay'></div>\r\n            <div className='modal-wrapper'>\r\n              <div className='modal-header'>\r\n                header\r\n              </div>\r\n              <div className='modal-contents'>\r\n                {REMOVE_LIST.map((v: any, i:any) => (\r\n                <ul>\r\n                  <li key={i}>{v}</li><span onClick={RemoveMusic}>x</span>\r\n                </ul>\r\n                ))}\r\n                {/* <ul>\r\n                  <li>YOU THINK I'M STUPID? YOU THINK I'M CRAZY</li><span onClick={RemoveMusic}>x</span>\r\n                </ul>\r\n                <ul>\r\n                  <li>AKMU - FREEDOM (AUDIO).mp3</li><span onClick={RemoveMusic}>x</span>\r\n                </ul> */}\r\n              </div>\r\n              <div className='modal-footer' onClick={()=>setRemoveMusic(false)}>닫기</div>\r\n            </div>\r\n      </div>\r\n      : null }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hello\r\n","C:\\works\\hello\\front\\src\\index.tsx",[],"C:\\works\\Hello\\front\\src\\components\\Hello.tsx",[],"C:\\works\\Hello\\front\\src\\index.tsx",[],{"ruleId":"21","severity":1,"message":"22","line":24,"column":21,"nodeType":"23","endLine":24,"endColumn":25},"react-hooks/exhaustive-deps","Assignments to the 'REMOVE_LIST' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Identifier"]